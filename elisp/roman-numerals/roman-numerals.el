;;; roman-numerals.el --- roman-numerals Exercise (exercism)

;;; Commentary:

;;; Code:

(defun to-roman (n)
  "Convert the number `N' to its Roman numeral equivalent."
  (let ((remaining n)
        (roman ""))
    (while (> remaining 0)
      (cond
       ((<= 1000 remaining)
        (setq remaining (- remaining 1000))
        (setq roman (concat roman "M")))
       ((<= 900 remaining)
        (setq remaining (- remaining 900))
        (setq roman (concat roman "CM")))
       ((<= 500 remaining)
        (setq remaining (- remaining 500))
        (setq roman (concat roman "D")))
       ((<= 400 remaining)
        (setq remaining (- remaining 400))
        (setq roman (concat roman "CD")))
       ((<= 100 remaining)
        (setq remaining (- remaining 100))
        (setq roman (concat roman "C")))
       ((<= 90 remaining)
        (setq remaining (- remaining 90))
        (setq roman (concat roman "XC")))
       ((<= 50 remaining)
        (setq remaining (- remaining 50))
        (setq roman (concat roman "L")))
       ((<= 40 remaining)
        (setq remaining (- remaining 40))
        (setq roman (concat roman "XL")))
       ((<= 10 remaining)
        (setq remaining (- remaining 10))
        (setq roman (concat roman "X")))
       ((<= 9 remaining)
        (setq remaining (- remaining 9))
        (setq roman (concat roman "IX")))
       ((<= 5 remaining)
        (setq remaining (- remaining 5))
        (setq roman (concat roman "V")))
       ((<= 4 remaining)
        (setq remaining (- remaining 4))
        (setq roman (concat roman "IV")))
       ((<= 1 remaining)
        (setq remaining (- remaining 1))
        (setq roman (concat roman "I")))))
    roman))

(provide 'roman-numerals)
;;; roman-numerals.el ends here
