;; tap.stanza -- TAP test runner for L.B. Stanza
;;
;; This package implements a basic automated test runner.
;; It outputs results in the Test Anything Protocol (TAP),
;; documented at https://testanything.org.
;; It's heavily inspired by Perl's Test::More package.

defpackage taptests :
    import core
    import collections

;; -----------------------------------------------------------------------------
;; Test type

public deftype Test
public defmulti passed (t:Test) -> True|False
public defmulti has-description? (t:Test) -> True|False
public defmulti description (t:Test) -> String
public defmulti has-diagnostics? (t:Test) -> True|False
public defmulti diagnostics (t:Test) -> Printable

public defn failed (t:Test) -> True|False :
    not passed(t)

;; -----------------------------------------------------------------------------
;; Test suites

public deftype TestSuite
public defmulti add (suite:TestSuite, test:Test)
public defmulti run-all (suite:TestSuite)

public defn TestSuite () -> TestSuite :
    val tests = Vector<Test>()
    new TestSuite :
        defmethod add (this:TestSuite, test:Test) :
            add(tests, test)
        defmethod run-all (this:TestSuite) :
            println("1..%_" % [length(tests)])
            for (test in tests, i in 1 to false) do :
                println $ message-for(test, i)
                if failed(test) and has-diagnostics?(test) :
                    do(println, diagnostics-for(test))

defn message-for (t:Test, i:Int) -> Printable :
    val message =
        if passed(t) :
            "ok %_" % [i]
        else :
            "not ok %_" % [i]
    if has-description?(t) :
        "%_ - %_" % [message, description(t)]
    else :
        message

defn diagnostics-for (t:Test) -> Seq<Printable> :
    val lines = split(to-string(diagnostics(t)), "\n")
    for line in lines seq :
        "# %_" % [line]

;; -----------------------------------------------------------------------------
;; Equality tests

deftype EqualityTest <: Test
defmulti actual (t:EqualityTest) -> Equalable
defmulti expected (t:EqualityTest) -> Equalable

defn EqualityTest (actual:Equalable, expected:Equalable) -> EqualityTest :
    EqualityTest(actual, expected, "")

defn EqualityTest (actual:Equalable, expected:Equalable, description:String) -> EqualityTest :
    new EqualityTest :
        defmethod actual (this) :
            actual
        defmethod expected (this) :
            expected
        defmethod has-description? (this) :
            description != ""
        defmethod description (this) :
            description
        defmethod has-diagnostics? (this) :
            true
        defmethod diagnostics (this) :
            "Expected: %_\nGot: %_" % [expected, actual]

defmethod passed (t:EqualityTest) -> True|False :
    actual(t) == expected(t)

public defn eq (suite:TestSuite, actual:Equalable, expected:Equalable) :
    add(suite, EqualityTest(actual, expected))

public defn eq (suite:TestSuite, actual:Equalable, expected:Equalable, description:String) :
    add(suite, EqualityTest(actual, expected, description))
