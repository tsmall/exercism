defpackage taptests :
    import core
    import collections

public deftype Test
public defmulti passed (t:Test) -> True|False
public defmulti has-description? (t:Test) -> True|False
public defmulti description (t:Test) -> String

public deftype TestSuite
public defmulti add (suite:TestSuite, test:Test)
public defmulti run-all (suite:TestSuite)

public defn TestSuite () -> TestSuite :
    val tests = Vector<Test>()
    new TestSuite :
        defmethod add (this:TestSuite, test:Test) :
            add(tests, test)
        defmethod run-all (this:TestSuite) :
            println("1..%_" % [length(tests)])
            for (test in tests, i in 1 to false) do :
                val message =
                    if passed(test) :
                        "ok %_" % [i]
                    else :
                        "not ok %_" % [i]
                if has-description?(test) :
                    println("%_ - %_" % [message, description(test)])
                else :
                    println(message)

deftype EqualityTest <: Test
defmulti actual (t:EqualityTest) -> Equalable
defmulti expected (t:EqualityTest) -> Equalable

defn EqualityTest (actual:Equalable, expected:Equalable) -> EqualityTest :
    new EqualityTest :
        defmethod actual (this) :
            actual
        defmethod expected (this) :
            expected
        defmethod has-description? (this) :
            false
        defmethod description (this) :
            ""

defn EqualityTest (actual:Equalable, expected:Equalable, description:String) -> EqualityTest :
    new EqualityTest :
        defmethod actual (this) :
            actual
        defmethod expected (this) :
            expected
        defmethod has-description? (this) :
            true
        defmethod description (this) :
            description

defmethod passed (t:EqualityTest) -> True|False :
    actual(t) == expected(t)

public defn eq (suite:TestSuite, actual:Equalable, expected:Equalable) :
    add(suite, EqualityTest(actual, expected))

public defn eq (suite:TestSuite, actual:Equalable, expected:Equalable, description:String) :
    add(suite, EqualityTest(actual, expected, description))
