defpackage taptests :
    import core
    import collections

public deftype Test
public defmulti passed (t:Test) -> True|False

public deftype TestSuite
public defmulti add (suite:TestSuite, test:Test)
public defmulti run-all (suite:TestSuite)

public defn TestSuite () -> TestSuite :
    val tests = Vector<Test>()
    new TestSuite :
        defmethod add (this:TestSuite, test:Test) :
            add(tests, test)
        defmethod run-all (this:TestSuite) :
            println("1..%_" % [length(tests)])
            for (test in tests, i in 1 to false) do :
                if passed(test) :
                    println("ok %_" % [i])
                else :
                    println("not ok %_" % [i])

defstruct EqualityTest <: Test :
    actual: Equalable
    expected: Equalable

defmethod passed (t:EqualityTest) :
    actual(t) == expected(t)

public defn eq (suite:TestSuite, actual:Equalable, expected:Equalable) :
    add(suite, EqualityTest(actual, expected))
